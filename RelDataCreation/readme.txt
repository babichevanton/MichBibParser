В PyCharm проекте RelDataCreation 3 конфигурации запуска. Нужна Test Data Gen. Записи берутся из файла data/samples.json и для каждой происходит сопоставление токенов текста и меток атрибутов.

Формат одной записи: [текст записи, словарь атрибутов записи]

Сопоставление меток 1 записи ищется следующим образом:
1) Для каждой метки атрибута записи запоминается длина значения атрибута в токенах - window_size.
2) Далее:
	а) В тексте записи выбирается window_size подряд идущих токенов. Необходимо перебрать все такие последовательности токенов. Каждая последовательность - это список токенов текста записи.
	б) Ищутся 2 характеристики. Первая - число элементов последовательности, являющихся началом токенов значения атрибута (один элемент последовательнояти явл. началом не более одного токена значения атрибута). Вторая- расстояние Левенштейна между конкатенацией элементов последовательности и значением атрибута.
	в) Запоминается последовательность с наибольшей первой характеристикой и (в случае равенства первой с таковой для другой последовательности) наименьшей второй. То есть выбиреается минимально отличающийся от значения атрибута набор токенов, где есть максимальное число префиксов токенов значения атрибута.
	Зачем? - Расстояние Левенштейна плохо обрабатывает инициалы авторов и плохо справляется с ситуациями, когда токены переставлены местами. Предпологаю, что такое вот хитрое 'пересечение' множеств токенов сможет уменьшить влияние инициалов на точность.
3) Процедура повторяется для размеров окон от window_size до 1

Беглая проверка показала, что инициалы стали обрабатываться лучше.
Есть проблема, заметил при проверке. Если в тексте записи токен написан с ошибкой/опечаткой, то токен скорее всего не сопоставится. Возможное решение -  использовать вместо проверки на префикс максимальный общий префикс каждой пары и отсекать его по порогу. Но, на мой взгляд, это трудно, и я не знаю, стоит ли оно того.